"""
Django settings for teamflow project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import environ

# .env 파일을 읽어오기 위한 설정
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
# .env 파일에서 GOOGLE_CLIENT_SECRET 변수 값을 가져와 사용
GOOGLE_CLIENT_SECRET = env('GOOGLE_CLIENT_SECRET')

# ========================================
# MGP: Google OAuth 환경 변수 디버깅
# 백엔드 팀원이 해결해야 할 부분 대신 해결: 환경 변수 로딩 문제
# ========================================
print(f"Google OAuth 설정 확인:")
print(f"GOOGLE_CLIENT_ID: {'설정됨' if GOOGLE_CLIENT_ID else '설정되지 않음'}")
print(f"GOOGLE_CLIENT_SECRET: {'설정됨' if GOOGLE_CLIENT_SECRET else '설정되지 않음'}")
# ========================================

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#jczp$^#q)@^(4v(921(w5*(gk$mo8nkpzy-rp@8e+dogjur_3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["223.130.129.249", "localhost", "127.0.0.1"]

CSRF_TRUSTED_ORIGINS = [
    "http://223.130.129.249",
    "https://223.130.129.249",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'rest_framework',
    'rest_framework.authtoken', 
    'rest_framework_simplejwt',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'teams',
    'dashboard',  
    'users',
    'tasks',
    'files',
    'schedule',
    'team_log',
    'roles',
]

# ========================================
# MGP: REST Framework 설정 추가
# 백엔드 팀원이 해결해야 할 부분 대신 해결: API 인증 문제
# ========================================
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}
# ========================================

SITE_ID = 2

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'teamflow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'teamflow.context_processors.global_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'teamflow.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# ========================================
# MGP: Static 파일 설정 추가
# 백엔드 부분 대신 수정: collectstatic 명령어 실행을 위한 STATIC_ROOT 설정 추가
STATIC_ROOT = BASE_DIR / 'staticfiles'
# ========================================

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field


#로그인 인증 백엔드, REST 설정
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# allauth 설정
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# ========================================
# 원래 백엔드 개발자 설정 (주석처리)
# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
#     'allauth.account.auth_backends.AuthenticationBackend',
# )
# 
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.TokenAuthentication',
#     ]
# }
# 
# LOGIN_REDIRECT_URL = '/api/auth/after-login/'  # 로그인 후 이동
# LOGOUT_REDIRECT_URL = '/'           # 로그아웃 후 이동할 페이지
# 
# # 구글 OAuth 클라이언트 정보
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         "APP": {
#         "client_id": (f"{GOOGLE_CLIENT_ID}"),
#         "secret": (f"{GOOGLE_CLIENT_SECRET}"),
#         "key": ""
#          },
# 
#         'SCOPE': ['profile', 'email'],
#         'AUTH_PARAMS': {'access_type': 'online'},
#     }
# }
# ========================================

# ========================================
# MGP: allauth 로그인 후 리다이렉트 설정 추가
# 백엔드 팀원이 해결해야 할 부분 대신 해결: 로그인 후 리다이렉트 로직 수정
# ========================================
LOGIN_REDIRECT_URL = '/api/auth/after-login/'  # 로그인 후 after_login_redirect 함수 호출
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

# ========================================
# MGP: 3rdparty signup 완전 비활성화 설정
# 백엔드 팀원이 해결해야 할 부분 대신 해결: 소셜 로그인 후 리다이렉트 로직
# ========================================
SOCIALACCOUNT_AUTO_SIGNUP = True  # 자동 회원가입 활성화
SOCIALACCOUNT_EMAIL_REQUIRED = False  # 이메일 필수 아님
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'  # 이메일 인증 안함
SOCIALACCOUNT_LOGIN_ON_GET = True  # GET 요청으로 바로 소셜 로그인 시작

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            "client_id": (f"{GOOGLE_CLIENT_ID}"),
            "secret": (f"{GOOGLE_CLIENT_SECRET}"),
            "key": ""
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# ========================================
# MGP: allauth 커스텀 어댑터 설정 추가 (3rdparty signup 우회)
# 백엔드 팀원이 해결해야 할 부분 대신 해결: 소셜 로그인 후 리다이렉트 로직
# ========================================
ACCOUNT_ADAPTER = 'users.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# ========================================
# MGP: 3rdparty signup 완전 비활성화
# 백엔드 팀원이 해결해야 할 부분 대신 해결: 소셜 로그인 후 리다이렉트 로직
# ========================================
SOCIALACCOUNT_SIGNUP_FORM_CLASS = None  # 3rdparty signup 폼 비활성화
SOCIALACCOUNT_QUERY_EMAIL = True  # 이메일 쿼리 활성화
SOCIALACCOUNT_EMAIL_REQUIRED = False  # 이메일 필수 아님
SOCIALACCOUNT_STORE_TOKENS = True  # 토큰 저장 활성화

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

env = environ.Env()
environ.Env.read_env()

# ========================================
# MGP: CLOVA API 키 설정 제거
# 환경변수 의존성 제거하여 roles/clova_ai.py에서 직접 관리하도록 변경
# CLOVA_API_KEY = env("CLOVA_API_KEY")  # 제거됨
# ========================================
NCP_API_URL = env('NCP_API_URL')
NCP_CLOVASTUDIO_API_KEY = env('NCP_CLOVASTUDIO_API_KEY')
NCP_APIGW_API_KEY = env('NCP_APIGW_API_KEY')

NCP_ACCESS_KEY = env('NCP_ACCESS_KEY')
NCP_SECRET_KEY = env('NCP_SECRET_KEY')
